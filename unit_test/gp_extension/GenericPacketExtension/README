Extension mechanism example:
----------------------------

This example illustrates how a module (tlm_master) can add extensions to a
generic payload object, and how another module can test for these (tlm_slave)
and access the associated data.

The tlm_extensions.h header file defines three simple extension classes
(tlm_extension1, 2 and 3). The tlm_master uses the following methods of the
generic payload class to add or clear a specific extension to the generic
payload object, with m_gp being a generic payload object and m_ext1 an
extension object of type tlm_extension1:

  m_gp.set_extension(&m_ext1);
  m_gp.clear_extension(&m_ext1);

Alternatively, the master could have used the non-templatized methods:

  m_gp.set_extension(tlm_extension1::ID, &m_ext1);
  m_gp.clear_extension(tlm_extension1::ID);

The tlm_slave module checks if an extension is present in the incoming generic
payload object by using (gp is a pointer to a generic payload object, and ext1
a pointer to a tlm_extension1 object:

  gp->get_extension(ext1);

Alternatively, the slave could also use the non-templatized version:

  ext1 = static_cast<tlm_extension1*>(gp->get_extension(tlm_extension1::ID));

If the ext1 pointer is non-zero the extension is present, and the slave is
free to use it.


Note that the transaction API used in this example is a temporary
implementation, and will need to be updated once the final API is defined.


You have to set these environment variables:
SYSTEMC_HOME -> your SystemC 2.2 installation
TLM_HOME     -> your (draft) TLM 2.0 installation

make or gmake builds the executable, and the test can be run with:

./tlm_gp_extensions

You can observe the following trace from execution:

master_1 : Single WRITE transaction :
 OK
master_1 : Single WRITE transaction :
slave_1: got extension 3 with value = 30
 OK
master_1 : Single WRITE transaction :
slave_1: got extension 2 with value = 20
 OK
master_1 : Single WRITE transaction :
slave_1: got extension 2 with value = 20
slave_1: got extension 3 with value = 30
 OK
master_1 : Single WRITE transaction :
slave_1: got extension 1 with value = 10
 OK
master_1 : Single WRITE transaction :
slave_1: got extension 1 with value = 10
slave_1: got extension 3 with value = 30
 OK
master_1 : Single WRITE transaction :
slave_1: got extension 1 with value = 10
slave_1: got extension 2 with value = 20
 OK
master_1 : Single WRITE transaction :
slave_1: got extension 1 with value = 10
slave_1: got extension 2 with value = 20
slave_1: got extension 3 with value = 30
 OK
master_1 : Single READ transaction :
 OK, data = 100
