                Release Notes for SystemC 2.3.1
                ===============================

        Andrew C. Goodrich,  Forte Design Systems
        Philipp A. Hartmann, OFFIS Institute for Information Technology

CONTENTS
========

  1) What's new in this release?

  2) Bug fixes and enhancements

  3) New features

  4) Incompatibitilies with previous releases

  5) Expanded dynamic process support

  6) Experimental features

  7) Known problems

  8) Fixed-point library

  9) TLM Release Notes


1) What's new in this release?
==============================

Compared to the 2.3.0, this release has the following new items:

  - TODO: update this section with highlights from
    https://github.com/OSCI-WG/systemc/issues?labels=&milestone=2&state=closed

  - This version of SystemC contains the "Proof of Concept" simulator
    for the IEEE 1666-2011 SystemC standard. Please consult the IEEE Std
    1666-2011 Language Reference Manual for details about the new SystemC
    standard.

  - TLM-2.0 is merged into the main SystemC release since 2.3.0.
    Please see section 9) below for more details related to TLM.

  - Bug fixes, see section 2.

  - Expanded platform support, see the README.


2) Bug fixes and enhancements
=============================

Following is the list of bug fixes and enhancements for this release:

     - TODO: update this section from
       https://github.com/OSCI-WG/systemc/issues?labels=&milestone=2&state=closed

     - The default stack size for threads, SC_DEFAULT_STACK_SIZE, has been 
       increased
       TODO: document this.

     - Expanded naming of signals in sc_vcd_trace.cpp to use 5 characters
       rather than 3 to accommodate more signals (incomplete in 2.3.0).


3) New features
===============

Here is an overview of changes in 2.3.1 compared to 2.3.0:

  - TODO: Update this section from
    https://github.com/OSCI-WG/systemc/issues?labels=05-feature&milestone=2&state=closed



4) Incompatibilities with previous releases
===========================================

Here is a list of known incompatibilities between this release and 2.3.0:

  - TODO: update this section

Here is a list of known incompatibilities between this release and 2.2.0:

  - The order that processes (SC_METHODS and SC_THREADS) are dispatched 
    for execution may be different than the order with SystemC 2.2.0 for
    some SystemC programs. This is related to the new starvation policy 
    support for the sc_start() function introduced with IEEE 1666_2011.

  - The various bind() functions for ports and exports are "virtual" as
    of IEEE 1666-2011.  This leads to an incompatibility with the
    TLM 2.0.x release.  To use SystemC 2.3 together with TLM 2.0.x,
    define SC_DISABLE_VIRTUAL_BIND during the build of the simulator and
    before including systemc.h.

  - TODO: document cleanups (windows.h, strstream, sc_string, tracing, ...)


5) Expanded Dynamic Process Support
===================================

- This version implements the dynamic process extensions described in the 
  IEEE Std 1666-2011 Language Reference Manual.


6) Experimental features
========================

In this section the experimental features of this release are listed.

  - TODO: document phase callback feature

7) Known Problems
=================

  - The use of the DEBUG_SYSTEMC macro does not work properly with certain
    compilers (e.g., gcc 2.95.x) if it was not also specified when the
    SystemC library was built. The problem is caused by the use of the
    library compiled version of some inline methods. This problem does not
    appear to be present in the gcc 3.3, Solaris, and aCC compilers.
    The work-around is to specify DEBUG_SYSTEMC when the SystemC library
    is built.

  - The sign-extension of mixed-signedness logic expressions (&,|)
    involving one sc_bigint<> operand and a limited width type is
    inconsistent between 32-bit and 64-bit platforms in some rare corner
    cases. Convert both operands to sc_bigint<> first.

  - TODO: document open issues from
    https://github.com/OSCI-WG/systemc/issues?milestone=3&labels=&state=open


8) Fixed-point library
======================

SystemC contains a fixed-point datatypes package.

Changes compared to SystemC 2.0.1

  - support for explicit construction from "float" values

  - removing a conversion ambiguity by marking some constructors of
    sc_fxval[_fast] classes as 'explicit'

Compile-time macro SC_INCLUDE_FX must be defined in order to build
applications that use fixed point types. You can specify a compiler
flag, e.g., g++ -DSC_INCLUDE_FX ... or use a define statement before
you include systemc.h, e.g.:

  #define SC_INCLUDE_FX
  #include "systemc.h"

Due to the large size of the fixed-point datatypes header files,
compilation can take considerably more time.

If you want to use the fixed-point data types only (i.e., not data-
types sc_int, sc_uint, sc_bigint, sc_biguint), compilation time can be
reduced by defining compile-time macro SC_FX_EXCLUDE_OTHER (in addition
to SC_INCLUDE_FX).


9) TLM Release Notes
====================

CONTENTS
========

  1) Supported SystemC versions
  2) What's changed in this kit?
  3) Known issues


9.1) Supported SystemC versions
===============================

SystemC 2.2.0 and 2.3.x are supported and have been tested.
SystemC 2.1.v1 is still supported in principle, but has not
been tested extensively.


9.2) What's changed in this kit?
================================

Compared to the standalone 2.0.2 kit, the following has changed:

TODO: document fixed issues from
      https://github.com/OSCI-WG/systemc/issues?milestone=2&labels=tlm&state=closed


9.3) Known issues
=================

a. The tlm_simple_target_socket in tlm_utils does not obey the END_REQ rule
   when only an nb_ call is registered, an b_ call is being handled in the
   socket and there is an nb_ call coming in at the same time. In this case
   the incoming nb_ call will be forwarded to the registered nb_ call without
   checking whether the earlier b_ call has passed the END_REQ timing point.

b. The implementation of the PEQ 'peq_with_get' in tlm_utils does not properly
   distinguish between immediate notifications and delta notifications. In the
   case that a immediate and delta notification happen at the same simulation
   time both types of notifications emerge from the PEQ in the same evaluation
   phase. This is wrong immediate notifications should overtake delta
   notifications.

TODO: document open issues from
      https://github.com/OSCI-WG/systemc/issues?milestone=&labels=tlm&state=open
