1.1          (acg      15-Dec-06): /*****************************************************************************
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):   The following code is derived, directly or indirectly, from the SystemC
1.2          (acg      22-May-08):   source code Copyright (c) 1996-2008 by all Contributors.
1.1          (acg      15-Dec-06):   All Rights reserved.
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):   The contents of this file are subject to the restrictions and limitations
1.1          (acg      15-Dec-06):   set forth in the SystemC Open Source License Version 2.4 (the "License");
1.1          (acg      15-Dec-06):   You may not use this file except in compliance with such restrictions and
1.1          (acg      15-Dec-06):   limitations. You may obtain instructions on how to receive a copy of the
1.1          (acg      15-Dec-06):   License at http://www.systemc.org/. Software distributed by Contributors
1.1          (acg      15-Dec-06):   under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
1.1          (acg      15-Dec-06):   ANY KIND, either express or implied. See the License for the specific
1.1          (acg      15-Dec-06):   language governing rights and limitations under the License.
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):  *****************************************************************************/
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): /*****************************************************************************
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):   sc_spawn_options.h -- Process spawning options specification.
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):   Original Authors: Andy Goodrich, Forte Design Systems, 17 June 2003
1.1          (acg      15-Dec-06):                     Stuart Swan, Cadence,
1.1          (acg      15-Dec-06):                     Bishnupriya Bhattacharya, Cadence Design Systems,
1.1          (acg      15-Dec-06):                     25 August, 2003
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):  *****************************************************************************/
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): /*****************************************************************************
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):   MODIFICATION LOG - modifiers, enter your name, affiliation, date and
1.1          (acg      15-Dec-06):   changes you are making here.
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):       Name, Affiliation, Date:
1.1          (acg      15-Dec-06):   Description of Modification:
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):  *****************************************************************************/
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): // $Log: sc_spawn_options.h,v $
1.5          (acg      20-Nov-10): // Revision 1.4  2009/05/22 16:06:29  acg
1.5          (acg      20-Nov-10): //  Andy Goodrich: process control updates.
1.5          (acg      20-Nov-10): //
1.4          (acg      22-May-09): // Revision 1.3  2009/02/28 00:26:58  acg
1.4          (acg      22-May-09): //  Andy Goodrich: changed boost name space to sc_boost to allow use with
1.4          (acg      22-May-09): //  full boost library applications.
1.4          (acg      22-May-09): //
1.3          (acg      28-Feb-09): // Revision 1.2  2008/05/22 17:06:26  acg
1.3          (acg      28-Feb-09): //  Andy Goodrich: updated copyright notice to include 2008.
1.3          (acg      28-Feb-09): //
1.2          (acg      22-May-08): // Revision 1.1.1.1  2006/12/15 20:20:05  acg
1.2          (acg      22-May-08): // SystemC 2.3
1.2          (acg      22-May-08): //
1.1          (acg      15-Dec-06): // Revision 1.4  2006/04/20 17:08:17  acg
1.1          (acg      15-Dec-06): //  Andy Goodrich: 3.0 style process changes.
1.1          (acg      15-Dec-06): //
1.1          (acg      15-Dec-06): // Revision 1.3  2006/01/13 18:44:30  acg
1.1          (acg      15-Dec-06): // Added $Log to record CVS changes into the source.
1.1          (acg      15-Dec-06): //
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): #if !defined(sc_spawn_options_h_INCLUDED)
1.1          (acg      15-Dec-06): #define sc_spawn_options_h_INCLUDED
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): #include <vector>
1.1          (acg      15-Dec-06): #include "sysc/communication/sc_export.h"
1.1          (acg      15-Dec-06): #include "sysc/communication/sc_signal_ports.h"
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): namespace sc_core {
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): class sc_event;
1.1          (acg      15-Dec-06): class sc_port_base;
1.1          (acg      15-Dec-06): class sc_interface;
1.1          (acg      15-Dec-06): class sc_event_finder;
1.1          (acg      15-Dec-06): class sc_process_b;
1.1          (acg      15-Dec-06): 
1.5          (acg      20-Nov-10): // +============================================================================
1.5          (acg      20-Nov-10): // | CLASS sc_spawn_reset_base - Class to do a generic access to an 
1.5          (acg      20-Nov-10): // |                             sc_spawn_rest object instance
1.5          (acg      20-Nov-10): // +===========================================================================
1.5          (acg      20-Nov-10): class sc_spawn_reset_base
1.5          (acg      20-Nov-10): {
1.5          (acg      20-Nov-10):   public:
1.5          (acg      20-Nov-10):     sc_spawn_reset_base( bool async, bool level ) : 
1.5          (acg      20-Nov-10): 	m_async( async ), m_level(level)
1.5          (acg      20-Nov-10):     {}
1.5          (acg      20-Nov-10):     virtual void specify_reset() = 0;
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):   protected:
1.5          (acg      20-Nov-10):     bool m_async;   // = true if async reset.
1.5          (acg      20-Nov-10):     bool m_level;   // level indicating reset.
1.5          (acg      20-Nov-10): };
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10): // +============================================================================
1.5          (acg      20-Nov-10): // | CLASS sc_spawn_reset<SOURCE> - Reset specification for sc_spawn_options.
1.5          (acg      20-Nov-10): // +===========================================================================
1.5          (acg      20-Nov-10): template<typename SOURCE>
1.5          (acg      20-Nov-10): class sc_spawn_reset : public sc_spawn_reset_base
1.5          (acg      20-Nov-10): {
1.5          (acg      20-Nov-10):   public:
1.5          (acg      20-Nov-10):     sc_spawn_reset( bool async, const SOURCE& source, bool level ) :
1.5          (acg      20-Nov-10): 	sc_spawn_reset_base(async, level), m_source(source)
1.5          (acg      20-Nov-10):     {}
1.5          (acg      20-Nov-10):     virtual void specify_reset()
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10): 	sc_reset::reset_signal_is( m_async, m_source, m_level );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):   protected:
1.5          (acg      20-Nov-10):     const SOURCE& m_source; // source of reset signal.
1.5          (acg      20-Nov-10): };
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06): //=============================================================================
1.1          (acg      15-Dec-06): // CLASS sc_spawn_options
1.1          (acg      15-Dec-06): //
1.1          (acg      15-Dec-06): //=============================================================================
1.1          (acg      15-Dec-06): class sc_spawn_options {
1.1          (acg      15-Dec-06):     friend class sc_cthread_process;
1.1          (acg      15-Dec-06):     friend class sc_method_process;
1.1          (acg      15-Dec-06):     friend class sc_process_b;
1.1          (acg      15-Dec-06):     friend class sc_thread_process;
1.1          (acg      15-Dec-06):   public:
1.1          (acg      15-Dec-06):     sc_spawn_options() :                  
1.5          (acg      20-Nov-10):         m_dont_initialize(false), m_spawn_method(false), m_stack_size(0)
1.1          (acg      15-Dec-06):         { }
1.1          (acg      15-Dec-06): 
1.5          (acg      20-Nov-10):     ~sc_spawn_options()
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         size_t resets_n = m_resets.size();
1.5          (acg      20-Nov-10): 	for ( size_t reset_i = 0; reset_i < resets_n; reset_i++ )
1.5          (acg      20-Nov-10): 	    delete m_resets[reset_i];
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.4          (acg      22-May-09):     void async_reset_signal_is( const sc_in<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_in<bool> >(true, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     void async_reset_signal_is( const sc_inout<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_inout<bool> >(true, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     void async_reset_signal_is( const sc_out<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_out<bool> >(true, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     void async_reset_signal_is( const sc_signal<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_signal<bool> >(true, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     void dont_initialize()   { m_dont_initialize = true; }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     bool is_method() const   { return m_spawn_method; }
1.5          (acg      20-Nov-10): 
1.3          (acg      28-Feb-09):     void reset_signal_is( const sc_in<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_in<bool> >(false, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     void reset_signal_is( const sc_inout<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_inout<bool> >(false, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     void reset_signal_is( const sc_out<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_out<bool> >(false, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):     void reset_signal_is( const sc_signal<bool>& port, bool level )
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         m_resets.push_back(
1.5          (acg      20-Nov-10): 	    new sc_spawn_reset<sc_signal<bool> >(false, port, level) );
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06):     void set_stack_size(int stack_size) { m_stack_size = stack_size; }
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06):     void set_sensitivity(const sc_event* event) 
1.1          (acg      15-Dec-06):         { m_sensitive_events.push_back(event); }
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06):     void set_sensitivity(sc_port_base* port_base)
1.1          (acg      15-Dec-06):         { m_sensitive_port_bases.push_back(port_base); }
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06):     void set_sensitivity(sc_interface* interface_p) 
1.1          (acg      15-Dec-06):         { m_sensitive_interfaces.push_back(interface_p); }
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06):     void set_sensitivity(sc_export_base* export_base) 
1.1          (acg      15-Dec-06):         { m_sensitive_interfaces.push_back(export_base->get_interface()); }
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06):     void set_sensitivity(sc_event_finder* event_finder) 
1.1          (acg      15-Dec-06):         { m_sensitive_event_finders.push_back(event_finder); }
1.1          (acg      15-Dec-06): 
1.5          (acg      20-Nov-10):     void spawn_method()                 { m_spawn_method = true; }
1.5          (acg      20-Nov-10): 
1.5          (acg      20-Nov-10):   protected:
1.5          (acg      20-Nov-10):     void specify_resets() const
1.5          (acg      20-Nov-10):     {
1.5          (acg      20-Nov-10):         size_t resets_n; // number of reset specifications to process.
1.5          (acg      20-Nov-10): 	resets_n = m_resets.size();
1.5          (acg      20-Nov-10): 	for ( size_t reset_i = 0; reset_i < resets_n; reset_i++ )
1.5          (acg      20-Nov-10): 	{
1.5          (acg      20-Nov-10): 	    m_resets[reset_i]->specify_reset();
1.5          (acg      20-Nov-10): 	}
1.5          (acg      20-Nov-10):     }
1.5          (acg      20-Nov-10): 
1.1          (acg      15-Dec-06):   private:
1.1          (acg      15-Dec-06):     sc_spawn_options( const sc_spawn_options& );
1.1          (acg      15-Dec-06):     const sc_spawn_options& operator = ( const sc_spawn_options& );
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06):   protected:
1.5          (acg      20-Nov-10):     bool                               m_dont_initialize;         
1.5          (acg      20-Nov-10):     std::vector<sc_spawn_reset_base*>  m_resets;
1.5          (acg      20-Nov-10):     std::vector<const sc_event*>       m_sensitive_events;
1.5          (acg      20-Nov-10):     std::vector<sc_event_finder*>      m_sensitive_event_finders; 
1.5          (acg      20-Nov-10):     std::vector<sc_interface*>         m_sensitive_interfaces;
1.5          (acg      20-Nov-10):     std::vector<sc_port_base*>         m_sensitive_port_bases;
1.5          (acg      20-Nov-10):     bool                               m_spawn_method; // Method not thread.
1.5          (acg      20-Nov-10):     int                                m_stack_size;   // Thread stack size.
1.1          (acg      15-Dec-06): };
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): } // namespace sc_core
1.1          (acg      15-Dec-06): 
1.1          (acg      15-Dec-06): #endif // !defined(sc_spawn_options_h_INCLUDED)
