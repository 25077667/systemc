Subject:
[tlmwg] Initial feedback
From:
Mark Burton <mark.burton@greensocs.com>
Date:
Thu, 31 Jan 2008 17:04:34 +0100
To:
Tlmwg (E-mail) <tlmwg@lists.systemc.org>

I'm not happy with this doc right now - it's rough and ready... I was hoping to work on it first:

Here it is for now - better/more/easy to read later....

Cheers

Mark.



wedge Low level API
wedge Blocking interface (untimed)
* b_transport(TRANS& trans)
* "TLM1 legacy interface"
* No timing information may be transmitted
wedge Nonblocking interface (loosely timed, aproximate timed)
wedge nb_transport(TRANS& trans, PHASE& phase, sc_core::sc_time& t)
wedge Templated
* typename TRANS = tlm_generic_payload
* typename PHASE = tlm_phase
* enum tlm_phase { BEGIN_REQ, END_REQ, BEGIN_RESP, END_RESP }
* enum tlm_sync_enum { TLM_REJECTED, TLM_ACCEPTED, TLM_UPDATED, TLM_COMPLETED }
wedge Transaction object can be returned
* WITH the return value
* OR by making an explicit BACKWARD PATH nb_transport call
wedge Direct Memory Interface and Debug Transaction Interface
* Direct access and debug access to an area of memory owned by a target
wedge TRANS argument: generic payload (tlm_generic_payload)
wedge Interoperability
wedge specific transaction type "to ease interoperability between models where the precise details of the transaction attributes are less important"
* What does the second part of the sentence mean in detail?
* "For maximum interoperability, application should use tlm_generic_payload"
wedge "In order to model specific protocols, applications may substitute their own transaction type"
* Q: isn't "modeling a specific protocol" the normal case in TLM?
* The initiator is responsible for deleting or pooling the transaction object after the call
wedge PHASE argument
wedge Q (4.2.7a): "Successive calls to nb_transport with the same phase shall not mark timing points."
* It doesnt become clear whether this is seen from the viewpoint of one single component (initiator may not issue several requests in a row) or from the transaction point of view (involving initiator and target). I guess, only the latter makes sense.
* This is in contrast to 4.2.11. The following model in my opinion would make absolutely sense: (1) initiator calls nb_transact with PHASE=BEGIN_REQ. (2) target returns TLM_UPDATED and sets PHASE=END_REQ. Then the master could (safely) call nb_transact with PHASE=BEGIN_REQ again (even without actually increasing simulation time, i.e. using the 'temporal decoupled' mode). This, however, would violate rule 4.2.7a. Due to this rule, the target is obliged to additionally do a backward nb_transact call with PHASE=BEGIN_RESP. This may affect both simulation performance and modeling efficiency.
wedge Coding Styles (loosely-timed, approximate timed)
wedge Q (4.2.7e): "..., each caller/callee connection requires (notionally, at least) a separate protocol state machine."
* An advantage of having a transaction container is that the components can attach private state information to the container. With this techniqe the lines of code for the protocol state machines can be reduced, which could be mentioned in the text.
wedge Q (4.2.8h): "Having the caller pass a positive value for the time argument to nb_transport is normally associated with the LT coding style, but is still technically possible in an AT model."
wedge This sounds as if for AT another method should be preferred. What is the recommended transport mechanism for AT models?
* Later on, the manual only discusses nb_transport for AT.
* This is in contrast to 4.2.8i, where it is said that calling nb_transport with positive time value in combination with a PEQ is characteristic to AT models.
* Mental note (4.2.8i): When using the LT coding style, a problem with out-of-order execution may occur, which must be taken care of by the model writer. This will become especially problematic when mixing LT and AT models.
wedge Q (4.2.8k)
* The last option, caller does a wait(t) after issuing the request, sounds dangerous: in case of randomized process execution order it could happen that the suspended thread awakes after the response has been received. This would complicate the code (need both internal event and state variable).It should be proposed to always use an internal event which is fired by nb_transact upon reception of the response.
wedge There are three different methods to indicate the completion of a transaction (and the user may decide how to use and mix them, 4.2.10 and 4.2.11 do not help):
* nb_transact returns TLM_COMPLETED
* an attribute in the transaction container marks the completion
* the phase marks the completion
wedge Mental note: With the proposed TLM fabric, the creation of  "interoperable" models that can handle any of the available transport techniques does not make sense. This would result in a salmagundi of if-then-else clauses, internal events, and state variables. Instead, the TLM2 user must make a selection of his "favorite" techniques and adhere strictly to this coding style.
* The different TLM2 coding styles cannot be (efficiently) mixed.
* Result: if the GreenBus low-level transport is to become TLM2, the GreenBus Generic Protocol should make a clear decision on which "coding style" to use. In other words, there should be one Generic Protocol for LT, and one Generic Protocol for AT. Mixed models should be supported with bridges.
wedge Important techniques
* Single transaction object passed by reference (non-const)
wedge Overall impression / Conclusions
* TLM2 offers so many (incompatible) possibilities of modeling transactions that it will be hard for a "newbie" to get his models right.
* The user manual describes the framework on a per-method basis. Thus, the user gets a lot of "puzzle pieces" that he must put together in his head while reading. I think it would be easier to understand the intended modeling methodologies if the document would provide one chapter per proposed coding style, i.e., one chapter for untimed, one for loosely-timed, and one for approximately timed modeling.
* ...
wedge Differences to GreenBus
* nb_transact has a return value (tlm_sync_enum)
wedge PEQ is not mandatory. Initiator and/or target need not necessarily have a PEQ.
* (4.2.8f): In nonblocking communication, callee immediately gets notified, independent of the delay time t specified by the caller. If the caller does not know what its state will be at sc_time_stamp()+t, it must return TLM_ACCEPTED and internally create a timed notification. For the latter the tlm_peq is proposed.
* ...
