.TH "tlm_generic_payload" 3 "17 Oct 2007" "Version 1" "TLM 2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tlm_generic_payload \- TLM generic payload.  

.PP
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBhostHasLittleEndianness\fP ()"
.br
.ti -1c
.RI "bool \fBhasHostEndianness\fP (\fBtlm_endianness\fP endianness)"
.br
.ti -1c
.RI "unsigned char \fBswap_bytes\fP (unsigned char rhs)"
.br
.ti -1c
.RI "char \fBswap_bytes\fP (char rhs)"
.br
.ti -1c
.RI "signed char \fBswap_bytes\fP (signed char rhs)"
.br
.ti -1c
.RI "unsigned short \fBswap_bytes\fP (unsigned short rhs)"
.br
.ti -1c
.RI "signed short \fBswap_bytes\fP (signed short rhs)"
.br
.ti -1c
.RI "unsigned int \fBswap_bytes\fP (unsigned int rhs)"
.br
.ti -1c
.RI "signed int \fBswap_bytes\fP (signed int rhs)"
.br
.ti -1c
.RI "unsigned long \fBswap_bytes\fP (unsigned long rhs)"
.br
.ti -1c
.RI "signed long \fBswap_bytes\fP (signed long rhs)"
.br
.ti -1c
.RI "unsigned long long \fBswap_bytes\fP (unsigned long long rhs)"
.br
.ti -1c
.RI "signed long long \fBswap_bytes\fP (signed long long rhs)"
.br
.ti -1c
.RI "void \fBcopy_data\fP (const unsigned char *src, unsigned char *dest, unsigned int nrOfBytes, \fBtlm_endianness\fP endianness)"
.br
.ti -1c
.RI "template<typename DT> DT \fBswapIfNeeded\fP (DT word, \fBtlm_endianness\fP endianness)"
.br
.ti -1c
.RI "unsigned int \fBmax_num_extensions\fP (bool increment=false)"
.br
.ti -1c
.RI "template<class T> void \fBcopy_from_array\fP (T &data, unsigned int index, unsigned char *\fBm_data\fP)"
.br
.ti -1c
.RI "template<class T> void \fBcopy_to_array\fP (const T &data, unsigned int index, unsigned char *\fBm_data\fP)"
.br
.ti -1c
.RI "\fBTLM_COPY_FROM_ARRAY\fP (signed char)"
.br
.ti -1c
.RI "\fBTLM_COPY_FROM_ARRAY\fP (signed long)"
.br
.ti -1c
.RI "\fBTLM_COPY_FROM_ARRAY\fP (signed long long)"
.br
.ti -1c
.RI "\fBTLM_COPY_FROM_ARRAY\fP (unsigned char)"
.br
.ti -1c
.RI "\fBTLM_COPY_FROM_ARRAY\fP (unsigned long)"
.br
.ti -1c
.RI "\fBTLM_COPY_FROM_ARRAY\fP (unsigned long long)"
.br
.ti -1c
.RI "\fBTLM_COPY_TO_ARRAY\fP (signed char)"
.br
.ti -1c
.RI "\fBTLM_COPY_TO_ARRAY\fP (signed long)"
.br
.ti -1c
.RI "\fBTLM_COPY_TO_ARRAY\fP (signed long long)"
.br
.ti -1c
.RI "\fBTLM_COPY_TO_ARRAY\fP (unsigned char)"
.br
.ti -1c
.RI "\fBTLM_COPY_TO_ARRAY\fP (unsigned long)"
.br
.ti -1c
.RI "\fBTLM_COPY_TO_ARRAY\fP (unsigned long long)"
.br
.in -1c
.SH "Detailed Description"
.PP 
TLM generic payload. 
.SH "Function Documentation"
.PP 
.SS "void tlm_generic_payload::copy_data (const unsigned char * src, unsigned char * dest, unsigned int nrOfBytes, \fBtlm_endianness\fP endianness)\fC [inline]\fP"
.PP
Definition at line 85 of file tlm_generic_payload.h.
.SS "template<class T> void tlm_generic_payload::copy_from_array (T & data, unsigned int index, unsigned char * m_data)\fC [inline]\fP"
.PP
Definition at line 681 of file tlm_generic_payload.h.
.SS "template<class T> void tlm_generic_payload::copy_to_array (const T & data, unsigned int index, unsigned char * m_data)\fC [inline]\fP"
.PP
Definition at line 698 of file tlm_generic_payload.h.
.SS "bool tlm_generic_payload::hasHostEndianness (\fBtlm_endianness\fP endianness)\fC [inline]\fP"
.PP
Definition at line 53 of file tlm_generic_payload.h.
.SS "bool tlm_generic_payload::hostHasLittleEndianness ()\fC [inline]\fP"
.PP
Definition at line 35 of file tlm_generic_payload.h.
.SS "unsigned int tlm_generic_payload::max_num_extensions (bool increment = \fCfalse\fP)\fC [inline]\fP"
.PP
Definition at line 305 of file tlm_generic_payload.h.
.PP
Referenced by resize_extensions().
.SS "signed long long tlm_generic_payload::swap_bytes (signed long long rhs)\fC [inline]\fP"
.PP
Definition at line 77 of file tlm_generic_payload.h.
.SS "unsigned long long tlm_generic_payload::swap_bytes (unsigned long long rhs)\fC [inline]\fP"
.PP
Definition at line 76 of file tlm_generic_payload.h.
.SS "signed long tlm_generic_payload::swap_bytes (signed long rhs)\fC [inline]\fP"
.PP
Definition at line 74 of file tlm_generic_payload.h.
.SS "unsigned long tlm_generic_payload::swap_bytes (unsigned long rhs)\fC [inline]\fP"
.PP
Definition at line 73 of file tlm_generic_payload.h.
.SS "signed int tlm_generic_payload::swap_bytes (signed int rhs)\fC [inline]\fP"
.PP
Definition at line 71 of file tlm_generic_payload.h.
.SS "unsigned int tlm_generic_payload::swap_bytes (unsigned int rhs)\fC [inline]\fP"
.PP
Definition at line 70 of file tlm_generic_payload.h.
.SS "signed short tlm_generic_payload::swap_bytes (signed short rhs)\fC [inline]\fP"
.PP
Definition at line 68 of file tlm_generic_payload.h.
.SS "unsigned short tlm_generic_payload::swap_bytes (unsigned short rhs)\fC [inline]\fP"
.PP
Definition at line 67 of file tlm_generic_payload.h.
.SS "signed char tlm_generic_payload::swap_bytes (signed char rhs)\fC [inline]\fP"
.PP
Definition at line 65 of file tlm_generic_payload.h.
.SS "char tlm_generic_payload::swap_bytes (char rhs)\fC [inline]\fP"
.PP
Definition at line 64 of file tlm_generic_payload.h.
.SS "unsigned char tlm_generic_payload::swap_bytes (unsigned char rhs)\fC [inline]\fP"
.PP
Definition at line 63 of file tlm_generic_payload.h.
.SS "template<typename DT> DT tlm_generic_payload::swapIfNeeded (DT word, \fBtlm_endianness\fP endianness)\fC [inline]\fP"
.PP
Definition at line 102 of file tlm_generic_payload.h.
.SS "tlm_generic_payload::TLM_COPY_FROM_ARRAY (unsigned long long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_FROM_ARRAY (unsigned long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_FROM_ARRAY (unsigned char)"
.PP
.SS "tlm_generic_payload::TLM_COPY_FROM_ARRAY (signed long long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_FROM_ARRAY (signed long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_FROM_ARRAY (signed char)"
.PP
.SS "tlm_generic_payload::TLM_COPY_TO_ARRAY (unsigned long long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_TO_ARRAY (unsigned long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_TO_ARRAY (unsigned char)"
.PP
.SS "tlm_generic_payload::TLM_COPY_TO_ARRAY (signed long long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_TO_ARRAY (signed long)"
.PP
.SS "tlm_generic_payload::TLM_COPY_TO_ARRAY (signed char)"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen for TLM 2 from the source code.
